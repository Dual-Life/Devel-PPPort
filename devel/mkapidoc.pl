#!/bin/bash
################################################################################
#
#  mkapidoc.sh -- generate apidoc.fnc from scanning the Perl source
#
# Should be called from the base directory for Devel::PPPort.
# If that happens to be in the /dist directory of a perl build structure, and
# you're doing the standard thing, no parameters are required.  Otherwise
# (again with the standard things, it can be called with one parameter:
#       sh devel/mkapidoc.sh /path/to/the/embed.fnc/you/want
#
################################################################################
#
#  Version 3.x, Copyright (C) 2004-2013, Marcus Holland-Moritz.
#  Version 2.x, Copyright (C) 2001, Paul Marquess.
#  Version 1.x, Copyright (C) 1999, Kenneth Albanowski.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the same terms as Perl itself.
#
################################################################################

function isperlroot
{
  [ -f "$1/embed.fnc" ] && [ -f "$1/perl.h" ]
}

function usage
{
  echo "USAGE: $0 [perlroot] [output-file] [input embed.fnc] [input config_h.SH]"
  exit 0
}

if [ -z "$1" ]; then
  if isperlroot "../../.."; then
    PERLROOT=../../..
  fi
else
  PERLROOT=$1
fi

if [ -z "$2" ]; then
  if [ -f "parts/apidoc.fnc" ]; then
    OUTPUT="parts/apidoc.fnc"
  else
    usage
  fi
else
  OUTPUT=$2
fi

if [ -z "$3" ]; then
  EMBED="$PERLROOT/embed.fnc"
else
  EMBED=$3
fi

if [ -z "$4" ]; then
  CONFIG="$PERLROOT/config_h.SH"
else
  CONFIG=$4
fi

if isperlroot $PERLROOT; then
  cat >$OUTPUT <<EOF
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:
:  !!!! Do NOT edit this file directly! -- Edit devel/mkapidoc.sh instead. !!!!
:
:  This file was automatically generated from the API documentation scattered
:  all over the Perl source code. To learn more about how all this works,
:  please read the F<HACKERS> file that came with this distribution.
:
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:
: This file lists all API functions/macros that are documented in the Perl
: source code, but are not contained in F<embed.fnc>.
:
EOF
    grep -hr '^=for apidoc' $PERLROOT | sed -e 's/=for apidoc //'           \
  | grep '|'                                                                \
  | sort                                                                    \
  | uniq                                                                    \
  | sort -f -t'|' -k3                                                       \
  | perl -e 'use warnings;
             use strict;
             my $c=pop;
             my $f=pop;
             my %h;

             # Populate %h with the embed.fnc entry names
             open(F,$f) || die "$f:$!";
             while (<F>) {                      # In embed.fnc,
                next unless /^[A-Za-z]+\t/;     # skip lines that arent defns
                (  split /\s*\|\s*/ ) [2] =~ /(\w+)/;
                $h{$1}++;   # Note in %h that $1 is in $EMBED
            }
            close F;

            # STDIN consists of the =for apidoc lines.  Those in embed.fnc
            # already give us their prototypes, so skip.  Otherwise massage the
            # input somewhat and save them
            my @entries;
            while (<>) {
                s/\|/d|/ unless /^[^|]*d/; # Many of the entries omit the "d"
                                           # flag to indicate they are
                                           # documented, but  we wouldnt have
                                           # found this unless it was
                                           # documented in the source
                s/[ \t]+$//;
                (  split /\s*\|\s*/  ) [2] =~ /(\w+)/;
                push @entries, $_ unless $h{$1}
            }

            # The entries in config_h.SH are also (documented) macros that are
            # accessible to XS code, and ppport.h backports some of them.  We
            # use only the unconditionally compiled parameterless ones (as
            # that"s all that"s backported so far, and we don"t have to know
            # the types of the parameters.
            open(C, "<", $c) or die "$c: $!";
            my $if_depth = 0;   # We don"t use the ones within #if statements
                                # The #ifndef that guards the whole file is not
                                # noticed by the code below
            while (<C>) {
                $if_depth ++ if / ^ \# [[:blank:]]* (ifdef | if\ defined ) /x;
                $if_depth -- if $if_depth > 0 && / ^ \# [[:blank:]]* endif /x;
                next unless $if_depth <= 0;

                # We are only interested in #defines with no parameters
                next unless /^ \# [[:blank:]]* define [[:blank:]]+
                                 ( [A-Za-z][A-Za-z0-9]* )
                                 [[:blank:]]
                            /x;
                next if $h{$1}; # Ignore duplicates
                push @entries, "Amnd||$1\n";
                $h{$1}++;
            }
            close C;

            require "./parts/inc/inctools";
            print sort sort_api_lines @entries;
           '  $EMBED $CONFIG >> $OUTPUT
else
  echo "$0: First parameter must be a directory containing embed.fnc and perl.h"
  usage
fi
