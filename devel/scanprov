#!/usr/bin/perl -w
use strict;
# use Data::Dumper;
require 'parts/ppptools.pl';

my $file = 'provided.c';

my %embed = map { ( $_->{name} => 1 ) }
            parse_embed(qw(parts/embed.fnc parts/apidoc.fnc));

my @provided = grep { !exists $embed{$_} }
               map { /^(\w+)/ ? $1 : () }
               `$^X ppport.h --list-provided`;

my $install = '/tmp/perl/install/default';

my @perls = sort { $b->{version} <=> $a->{version} }
            map { { version => `$_ -e 'printf "%.6f", \$]'`, path => $_ } }
            ('bleadperl', glob "$install/*/bin/perl5.*");

for (1 .. $#perls) {
  $perls[$_]{todo} = $perls[$_-1]{version};
}

shift @perls;

my %v;

for my $p (@perls) {
  my $archlib = `$p->{path} -MConfig -l -e 'print \$Config{archlib}'`;
  chomp $archlib;
  local @ARGV = glob "$archlib/CORE/*.h";
  my %sym;
  while (<>) { $sym{$_}++ for /(\w+)/g; }
  @provided = map { $sym{$_} or $v{$p->{todo}}{$_}++; $sym{$_} ? $_ : () } @provided;
}

# print Dumper(\%v, \@provided);

my $out = 'parts/base';

for my $v (keys %v) {
  my $file = $v;
  $file =~ s/\.//g;
  $file = "$out/$file";
  -e $file or die "non-existent: $file\n";
  open F, ">>$file" or die "$file: $!\n";
  printf F "%-30s # added by $0\n", $_ for sort keys %{$v{$v}};
  close F;
}
