#!/usr/bin/perl -w
################################################################################
#
#  scanprov -- scan Perl headers for provided macros
#
################################################################################
#
#  Version 3.x, Copyright (C) 2004-2013, Marcus Holland-Moritz.
#  Version 2.x, Copyright (C) 2001, Paul Marquess.
#  Version 1.x, Copyright (C) 1999, Kenneth Albanowski.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the same terms as Perl itself.
#
################################################################################

use strict;
use Getopt::Long;

require './parts/ppptools.pl';
require './parts/inc/inctools';
require './devel/devtools.pl';

our %opt = (
  mode    => 'check',
  install => '/tmp/perl/install/default',
  blead   => 'bleadperl',
  debug   => 0,
 'debug-start' => "",
);

GetOptions(\%opt, qw( install=s mode=s blead=s debug=i debug-start=s)) or die;

my $write = $opt{mode} eq 'write';

my %embed = map { ( $_->{name} => 1 ) }
            parse_embed(qw(parts/embed.fnc parts/apidoc.fnc parts/ppport.fnc ));

# @provided is set to the elements that are provided, but not functions in the
# .fnc files
my @provided = grep { !exists $embed{$_} }
               map { /^(\w+)/ ? $1 : () }
               `$^X ppport.h --list-provided`;

my $perls_ref = get_and_sort_perls(\%opt);


die "Couldn't find any perls" unless @$perls_ref > 1;

my %v;

# We look in descending order of perl versions.  Each time through the loop
# @provided is narrowed.
for my $p (@$perls_ref) {
  print "checking perl $p->{version}...\n";

  # Get the hdr files associated with this version
  my $archlib = `$p->{path} -MConfig -l -e 'print \$Config{archlib}'`;
  chomp $archlib;
  local @ARGV = glob "$archlib/CORE/*.h";
  my %sym;

  # %sym's keys are every single \w+ that occurs in all the headers,
  # regardless of if they are in a comment, or what.
  while (<>) { $sym{$_}++ for /(\w+)/g; }

  # @provided is narrowed to include only those \w+ things that are mentioned
  # in some hdr in this release.  (If it isn't even mentioned, it won't exist in
  # the release.)  For those not mentioned, a key is added of the \w+ in %v.
  # It is a subkey of this release's "todo" release, which is the next higher
  # one.  If we are at version n, we have already done version n+1 and the
  # provided element was mentioned there, and now it no longer is.  We take
  # that to mean that to mean that the element became provided for in n+1.
  # (khw notes that it could have just been in a comment for a bunch of
  # releases above this, like
  #         /* Oh how I wish we had FOO */
  # and at some point FOO got added.  The method here is, hence, just a
  # heuristic.
  @provided = map { $sym{$_} or $v{$p->{todo}}{$_}++;
                    $sym{$_} ? $_ : ()
                  } @provided;
}

# Read in the parts/base files.  The hash ref has keys being all symbols found
# in all the files in base/, and the values being the perl versions each symbol
# became defined in.
my $out = 'parts/base';
my $base_ref = parse_todo($out);

# Now add the results from above.  At this point, The keys of %v are the 7
# digit BCD version numbers, and their subkeys are the symbols provided by
# D:P that are first mentioned in this version, like this:
#   '5009002' => {
#                  'MY_CXT_CLONE' => 1,
#                  'SV_NOSTEAL' => 1,
#                  'UTF8_MAXBYTES' => 1
#                },

for my $v (keys %v) {

  # Things listed in blead (the most recent file) are special.  They are there
  # by default because we haven't found them anywhere, so they don't really
  # exist as far as we can determine, so shouldn't be listed as existing.
  next if $v > $perls_ref->[0]->{file};

  # @new becomes the symbols for version $v not already in the file for $v
  my @new = sort dictionary_order grep { !exists $base_ref->{$_} }
                                                                keys %{$v{$v}};
  @new or next; # Nothing new, skip writing

  my $file = $v;
  $file =~ s/\.//g;
  $file = "$out/$file";
  -e $file or die "non-existent: $file\n";
  print "-- $file --\n";
  $write and (open F, ">>$file" or die "$file: $!\n");
  for (@new) {
    print "adding $_\n";
    $write and printf F "%-30s # added by $0\n", $_;
  }
  $write and close F;
}
